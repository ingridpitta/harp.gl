{
  "$ref": "#/definitions/Theme",
  "$schema": "http://json-schema.org/draft-06/schema#",
  "definitions": {
    "AmbientLight": {
      "additionalProperties": false,
      "description": "Light type: ambient.",
      "properties": {
        "color": {
          "type": "string"
        },
        "intensity": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "enum": [
            "ambient"
          ],
          "type": "string"
        }
      },
      "required": [
        "color",
        "name",
        "type"
      ],
      "type": "object"
    },
    "BasicExtrudedLineStyle": {
      "additionalProperties": false,
      "properties": {
        "attr": {
          "additionalProperties": false,
          "description": "Make all properties in T optional",
          "properties": {
            "caps": {
              "description": "Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to\n`\"Circle\"`.",
              "enum": [
                "None",
                "Circle"
              ],
              "type": "string"
            },
            "color": {
              "description": "Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "type": "string"
            },
            "fadeFar": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "fadeNear": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases).",
              "type": "number"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "lineColor": {
              "description": "Sets the polygon outline color.",
              "type": "string"
            },
            "lineFadeFar": {
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "lineFadeNear": {
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out.",
              "type": "number"
            },
            "lineWidth": {
              "$ref": "#/definitions/MaybeInterpolatedProperty<number>",
              "description": "Width of line in meters for different zoom levels."
            },
            "opacity": {
              "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.",
              "type": "number"
            },
            "polygonOffset": {
              "description": "Whether to use polygon offset. Default is false. This corresponds to the\nGL_POLYGON_OFFSET_FILL WebGL feature.\n\nPolygonOffset is used to raise the geometry towards the geometry (for depth calculation\nonly). Default is false.\n\nSee here: https://sites.google.com/site/threejstuts/home/polygon_offset\n\nTo activate polygonOffset these values have to be set to pull the line \"forwards\":\n\ntransparent: true\n\npolygonOffset: true\n\npolygonOffsetFactor : -1.0, (as an example, see link above)\n\npolygonOffsetUnits: -1 (as an example, see link above)",
              "type": "boolean"
            },
            "polygonOffsetFactor": {
              "description": "Sets the polygon offset factor. Default is 0.",
              "type": "number"
            },
            "polygonOffsetUnits": {
              "description": "Sets the polygon offset units. Default is 0.",
              "type": "number"
            },
            "renderOrder": {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonicaly increasing\nvalues according to style position in file.",
              "type": "number"
            },
            "renderOrderBiasGroup": {
              "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
              "type": "string"
            },
            "renderOrderBiasProperty": {
              "description": "Property that is used to hold the z-order delta in [renderOrderBiasRange].",
              "type": "string"
            },
            "renderOrderBiasRange": {
              "description": "Minimum and maximum z-order delta values.",
              "items": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "shading": {
              "description": "A value determining the shading technique. Valid values are \"Basic\" and \"Standard\". Default\nis \"Basic\".\n\n`\"basic\"`   : Simple shading, faster to render. Only simple color and opacity are effective.\n`\"standard\"`: Elaborate shading, with metalness, and roughness.\n\nTODO: is this TechniqueParams or Style prop ?",
              "enum": [
                "basic"
              ],
              "type": "string"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
              "type": "boolean"
            },
            "wireframe": {
              "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "debug": {
          "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
          "type": "boolean"
        },
        "description": {
          "description": "Human readable description.",
          "type": "string"
        },
        "final": {
          "description": "Optional. If `true`, no more matching styles will be evaluated.",
          "type": "boolean"
        },
        "labelProperty": {
          "description": "XYZ defines the property to display as text label of a feature in the styles.",
          "type": "string"
        },
        "metricUnit": {
          "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
          "enum": [
            "Meter",
            "Pixel"
          ],
          "type": "string"
        },
        "renderOrder": {
          "description": "Specify `renderOrder` of object.",
          "type": "number"
        },
        "renderOrderBiasGroup": {
          "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
          "type": "string"
        },
        "renderOrderBiasProperty": {
          "description": "Property that is used to hold the z-order delta.",
          "type": "string"
        },
        "renderOrderBiasRange": {
          "description": "Minimum and maximum z-order delta values.",
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "shading": {
          "enum": [
            "basic"
          ],
          "type": "string"
        },
        "styles": {
          "$ref": "#/definitions/StyleSet",
          "description": "Array of substyles."
        },
        "technique": {
          "description": "Technique name. Must be one of `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, or `\"none\"`.",
          "enum": [
            "extruded-line"
          ],
          "type": "string"
        },
        "transient": {
          "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
          "type": "boolean"
        },
        "when": {
          "description": "Compile-time condition.",
          "type": "string"
        }
      },
      "required": [
        "technique",
        "when"
      ],
      "type": "object"
    },
    "CirclesStyle": {
      "additionalProperties": false,
      "description": "Render feature as set of circles rendered in screen space.",
      "properties": {
        "attr": {
          "additionalProperties": false,
          "description": "Make all properties in T optional",
          "properties": {
            "color": {
              "description": "Color of a point in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "type": "string"
            },
            "enablePicking": {
              "description": "Whether to enable picking on these points.",
              "type": "boolean"
            },
            "fadeFar": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "fadeNear": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases).",
              "type": "number"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "opacity": {
              "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.",
              "type": "number"
            },
            "renderOrder": {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonicaly increasing\nvalues according to style position in file.",
              "type": "number"
            },
            "renderOrderBiasGroup": {
              "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
              "type": "string"
            },
            "renderOrderBiasProperty": {
              "description": "Property that is used to hold the z-order delta in [renderOrderBiasRange].",
              "type": "string"
            },
            "renderOrderBiasRange": {
              "description": "Minimum and maximum z-order delta values.",
              "items": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "size": {
              "description": "Size of point in pixels.",
              "type": "number"
            },
            "texture": {
              "description": "URL of a texture image to be loaded.",
              "type": "string"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "debug": {
          "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
          "type": "boolean"
        },
        "description": {
          "description": "Human readable description.",
          "type": "string"
        },
        "final": {
          "description": "Optional. If `true`, no more matching styles will be evaluated.",
          "type": "boolean"
        },
        "labelProperty": {
          "description": "XYZ defines the property to display as text label of a feature in the styles.",
          "type": "string"
        },
        "metricUnit": {
          "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
          "enum": [
            "Meter",
            "Pixel"
          ],
          "type": "string"
        },
        "renderOrder": {
          "description": "Specify `renderOrder` of object.",
          "type": "number"
        },
        "renderOrderBiasGroup": {
          "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
          "type": "string"
        },
        "renderOrderBiasProperty": {
          "description": "Property that is used to hold the z-order delta.",
          "type": "string"
        },
        "renderOrderBiasRange": {
          "description": "Minimum and maximum z-order delta values.",
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "styles": {
          "$ref": "#/definitions/StyleSet",
          "description": "Array of substyles."
        },
        "technique": {
          "description": "Technique name. Must be one of `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, or `\"none\"`.",
          "enum": [
            "circles"
          ],
          "type": "string"
        },
        "transient": {
          "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
          "type": "boolean"
        },
        "when": {
          "description": "Compile-time condition.",
          "type": "string"
        }
      },
      "required": [
        "technique",
        "when"
      ],
      "type": "object"
    },
    "DashedLineStyle": {
      "additionalProperties": false,
      "properties": {
        "attr": {
          "additionalProperties": false,
          "description": "Make all properties in T optional",
          "properties": {
            "clipping": {
              "description": "Clip the line outside the tile if `true`.",
              "type": "boolean"
            },
            "color": {
              "description": "Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "type": "string"
            },
            "dashSize": {
              "$ref": "#/definitions/MaybeInterpolatedProperty<number>",
              "description": "Length of a line in meters for different zoom levels."
            },
            "fadeFar": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "fadeNear": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases).",
              "type": "number"
            },
            "gapSize": {
              "$ref": "#/definitions/MaybeInterpolatedProperty<number>",
              "description": "Size of a gap between lines in meters for different zoom levels."
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "lineColor": {
              "description": "Sets the polygon outline color.",
              "type": "string"
            },
            "lineFadeFar": {
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "lineFadeNear": {
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out.",
              "type": "number"
            },
            "lineWidth": {
              "$ref": "#/definitions/MaybeInterpolatedProperty<number>",
              "description": "Width of a line in `metricUnit`s for different zoom levels."
            },
            "metricUnit": {
              "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
              "enum": [
                "Meter",
                "Pixel"
              ],
              "type": "string"
            },
            "name": {
              "description": "Name of technique. Is used in the theme file.",
              "enum": [
                "dashed-line"
              ],
              "type": "string"
            },
            "opacity": {
              "description": "For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\nopaque.",
              "type": "number"
            },
            "polygonOffset": {
              "description": "Whether to use polygon offset. Default is false. This corresponds to the\nGL_POLYGON_OFFSET_FILL WebGL feature.\n\nPolygonOffset is used to raise the geometry towards the geometry (for depth calculation\nonly). Default is false.\n\nSee here: https://sites.google.com/site/threejstuts/home/polygon_offset\n\nTo activate polygonOffset these values have to be set to pull the line \"forwards\":\n\ntransparent: true\n\npolygonOffset: true\n\npolygonOffsetFactor : -1.0, (as an example, see link above)\n\npolygonOffsetUnits: -1 (as an example, see link above)",
              "type": "boolean"
            },
            "polygonOffsetFactor": {
              "description": "Sets the polygon offset factor. Default is 0.",
              "type": "number"
            },
            "polygonOffsetUnits": {
              "description": "Sets the polygon offset units. Default is 0.",
              "type": "number"
            },
            "renderOrder": {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonicaly increasing\nvalues according to style position in file.",
              "type": "number"
            },
            "renderOrderBiasGroup": {
              "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
              "type": "string"
            },
            "renderOrderBiasProperty": {
              "description": "Property that is used to hold the z-order delta in [renderOrderBiasRange].",
              "type": "string"
            },
            "renderOrderBiasRange": {
              "description": "Minimum and maximum z-order delta values.",
              "items": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "debug": {
          "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
          "type": "boolean"
        },
        "description": {
          "description": "Human readable description.",
          "type": "string"
        },
        "final": {
          "description": "Optional. If `true`, no more matching styles will be evaluated.",
          "type": "boolean"
        },
        "labelProperty": {
          "description": "XYZ defines the property to display as text label of a feature in the styles.",
          "type": "string"
        },
        "metricUnit": {
          "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
          "enum": [
            "Meter",
            "Pixel"
          ],
          "type": "string"
        },
        "renderOrder": {
          "description": "Specify `renderOrder` of object.",
          "type": "number"
        },
        "renderOrderBiasGroup": {
          "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
          "type": "string"
        },
        "renderOrderBiasProperty": {
          "description": "Property that is used to hold the z-order delta.",
          "type": "string"
        },
        "renderOrderBiasRange": {
          "description": "Minimum and maximum z-order delta values.",
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "styles": {
          "$ref": "#/definitions/StyleSet",
          "description": "Array of substyles."
        },
        "technique": {
          "description": "Technique name. Must be one of `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, or `\"none\"`.",
          "enum": [
            "dashed-line"
          ],
          "type": "string"
        },
        "transient": {
          "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
          "type": "boolean"
        },
        "when": {
          "description": "Compile-time condition.",
          "type": "string"
        }
      },
      "required": [
        "technique",
        "when"
      ],
      "type": "object"
    },
    "DataTextureProperties": {
      "additionalProperties": false,
      "description": "Properties of a DataTexture (https://threejs.org/docs/#api/en/textures/DataTexture).",
      "properties": {
        "format": {
          "$ref": "#/definitions/PixelFormat"
        },
        "height": {
          "type": "number"
        },
        "type": {
          "$ref": "#/definitions/TextureDataType"
        },
        "width": {
          "type": "number"
        }
      },
      "required": [
        "width",
        "height"
      ],
      "type": "object"
    },
    "DirectionalLight": {
      "additionalProperties": false,
      "description": "Light type: directional.",
      "properties": {
        "castShadow": {
          "type": "boolean"
        },
        "color": {
          "type": "string"
        },
        "direction": {
          "$ref": "#/definitions/Vector3Like"
        },
        "intensity": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "enum": [
            "directional"
          ],
          "type": "string"
        }
      },
      "required": [
        "color",
        "direction",
        "intensity",
        "name",
        "type"
      ],
      "type": "object"
    },
    "ExtrudedPolygonStyle": {
      "additionalProperties": false,
      "description": "Style used to draw a geometry as an extruded polygon, for example extruded buildings.",
      "properties": {
        "attr": {
          "additionalProperties": false,
          "description": "Make all properties in T optional",
          "properties": {
            "alphaMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as alpha map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap"
            },
            "alphaMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "alphaTest": {
              "description": "The material will not be rendered if the opacity is lower than this value.\nSee https://threejs.org/docs/#api/en/materials/Material.alphaTest.",
              "type": "number"
            },
            "animateExtrusion": {
              "description": "Animate the extrusion of the buildings if set to `true`.",
              "type": "boolean"
            },
            "animateExtrusionDuration": {
              "description": "Duration of the building's extrusion in milliseconds",
              "type": "number"
            },
            "boundaryWalls": {
              "description": "If `false`, wall geometry will not be added along the tile boundaries.",
              "type": "boolean"
            },
            "bumpMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as bump map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap"
            },
            "bumpMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "color": {
              "description": "Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.",
              "type": "string"
            },
            "constantHeight": {
              "description": "If `true`, the height of the extruded buildings will not be modified by the mercator\nprojection distortion that happens around the poles.",
              "type": "boolean"
            },
            "defaultColor": {
              "description": "Default color used if feature doesn't provide color attribute\nand [[MapEnv]] did not return it too.",
              "type": "string"
            },
            "defaultHeight": {
              "description": "In some data sources, for example Tilezen, building extrusion information might be missing.\nThis attribute allows to define a default height of an extruded polygon in the theme.",
              "type": "number"
            },
            "depthTest": {
              "description": "Skip rendering clobbered pixels.\nSee https://threejs.org/docs/#api/en/materials/Material.depthTest.",
              "type": "boolean"
            },
            "displacementMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as displacement map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap"
            },
            "displacementMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "emissive": {
              "description": "Emissive (light) color of the material, essentially a solid color unaffected by other\nlighting. Default is black.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.",
              "type": "string"
            },
            "emissiveIntensity": {
              "description": "Intensity of the emissive light. Modulates the emissive color. Default is `1`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity.",
              "type": "number"
            },
            "emissiveMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as emissive map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap"
            },
            "emissiveMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "enableDepthPrePass": {
              "description": "Control rendering of depth prepass before the actual geometry.\n\nDepth prepass is a method to render translucent meshes, hence only the visible front faces of\na mesh are actually rendered, removing artifacts caused by blending with internal faces of\nthe mesh. This method is used for drawing translucent buildings over map background.\n\nBy default, each [[DataSource]] determines how/if enable the depth pre-pass. A value of\n`false` forcefully disables depth prepass.",
              "type": "boolean"
            },
            "fadeFar": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "fadeNear": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases).",
              "type": "number"
            },
            "footprint": {
              "description": "Renders the footprint lines if set to 'true'.",
              "type": "boolean"
            },
            "generateTextureCoordinates": {
              "description": "Whether texture coordinates should be generated. `false` by default.\nShould be set to `true` if textures are asigned (e.g. `map`, `normalMap`, ...).",
              "type": "boolean"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "lineColor": {
              "description": "Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "type": "string"
            },
            "lineColorMix": {
              "description": "Mix value between the lineColor(0.0) and the geometry's vertex colors(1.0).",
              "type": "number"
            },
            "lineFadeFar": {
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "lineFadeNear": {
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out.",
              "type": "number"
            },
            "lineWidth": {
              "$ref": "#/definitions/MaybeInterpolatedProperty<number>",
              "description": "Width of the lines. Currently limited to the [0, 1] range."
            },
            "map": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as color map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.map"
            },
            "mapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "maxSlope": {
              "description": "Set to a negative value to remove all the vertical lines, and to a value between 0.0 and 1.0\nto modulate the amount of vertical lines rendered.",
              "type": "number"
            },
            "metalness": {
              "description": "How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\nmetallic ones use `1.0`, with nothing (usually) in between. Default is `0.5`. A value between\n`0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\nvalues are multiplied.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness.",
              "type": "number"
            },
            "metalnessMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as metalness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap"
            },
            "metalnessMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "normalMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as normal map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap"
            },
            "normalMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "normalMapType": {
              "type": "number"
            },
            "opacity": {
              "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.\nSee https://threejs.org/docs/#api/en/materials/Material.opacity.",
              "type": "number"
            },
            "refractionRatio": {
              "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\nthe material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n`THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n  is `0.98`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio.",
              "type": "number"
            },
            "renderOrder": {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonicaly increasing\nvalues according to style position in file.",
              "type": "number"
            },
            "renderOrderBiasGroup": {
              "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
              "type": "string"
            },
            "renderOrderBiasProperty": {
              "description": "Property that is used to hold the z-order delta in [renderOrderBiasRange].",
              "type": "string"
            },
            "renderOrderBiasRange": {
              "description": "Minimum and maximum z-order delta values.",
              "items": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "renderTexture": {
              "description": "Render texture if available.\n\nDefaults to true if `map` is available for mesh.\n\nMay be used to forcefully disable textures in theme even if textures are available.",
              "type": "boolean"
            },
            "roughness": {
              "description": "How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\ndiffuse. Default is `0.5`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness.",
              "type": "number"
            },
            "roughnessMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as roughness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap"
            },
            "roughnessMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.\nSee https://threejs.org/docs/#api/en/materials/Material.transparent.",
              "type": "boolean"
            },
            "vertexColors": {
              "description": "If `vertexColors` is `true`, every vertex has color information, which is interpolated\nbetween vertices.\nSee https://threejs.org/docs/#api/en/materials/Material.vertexColors.",
              "type": "boolean"
            },
            "wireframe": {
              "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "debug": {
          "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
          "type": "boolean"
        },
        "description": {
          "description": "Human readable description.",
          "type": "string"
        },
        "final": {
          "description": "Optional. If `true`, no more matching styles will be evaluated.",
          "type": "boolean"
        },
        "labelProperty": {
          "description": "XYZ defines the property to display as text label of a feature in the styles.",
          "type": "string"
        },
        "metricUnit": {
          "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
          "enum": [
            "Meter",
            "Pixel"
          ],
          "type": "string"
        },
        "renderOrder": {
          "description": "Specify `renderOrder` of object.",
          "type": "number"
        },
        "renderOrderBiasGroup": {
          "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
          "type": "string"
        },
        "renderOrderBiasProperty": {
          "description": "Property that is used to hold the z-order delta.",
          "type": "string"
        },
        "renderOrderBiasRange": {
          "description": "Minimum and maximum z-order delta values.",
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "styles": {
          "$ref": "#/definitions/StyleSet",
          "description": "Array of substyles."
        },
        "technique": {
          "description": "Technique name. Must be one of `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, or `\"none\"`.",
          "enum": [
            "extruded-polygon"
          ],
          "type": "string"
        },
        "transient": {
          "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
          "type": "boolean"
        },
        "when": {
          "description": "Compile-time condition.",
          "type": "string"
        }
      },
      "required": [
        "technique",
        "when"
      ],
      "type": "object"
    },
    "FillStyle": {
      "additionalProperties": false,
      "properties": {
        "attr": {
          "additionalProperties": false,
          "description": "Make all properties in T optional",
          "properties": {
            "color": {
              "description": "Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "type": "string"
            },
            "fadeFar": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "fadeNear": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases).",
              "type": "number"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "lineColor": {
              "description": "Sets the polygon outline color.",
              "type": "string"
            },
            "lineFadeFar": {
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "lineFadeNear": {
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out.",
              "type": "number"
            },
            "lineWidth": {
              "description": "Width of the lines. Currently limited to the [0, 1] range.",
              "type": "number"
            },
            "opacity": {
              "description": "For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\nopaque.",
              "type": "number"
            },
            "polygonOffset": {
              "description": "Whether to use polygon offset. Default is false. This corresponds to the\nGL_POLYGON_OFFSET_FILL WebGL feature.\n\nPolygonOffset is used to raise the geometry towards the geometry (for depth calculation\nonly). Default is false.\n\nSee here: https://sites.google.com/site/threejstuts/home/polygon_offset\n\nTo activate polygonOffset these values have to be set to pull the line \"forwards\":\n\ntransparent: true\n\npolygonOffset: true\n\npolygonOffsetFactor : -1.0, (as an example, see link above)\n\npolygonOffsetUnits: -1 (as an example, see link above)",
              "type": "boolean"
            },
            "polygonOffsetFactor": {
              "description": "Sets the polygon offset factor. Default is 0.",
              "type": "number"
            },
            "polygonOffsetUnits": {
              "description": "Sets the polygon offset units. Default is 0.",
              "type": "number"
            },
            "renderOrder": {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonicaly increasing\nvalues according to style position in file.",
              "type": "number"
            },
            "renderOrderBiasGroup": {
              "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
              "type": "string"
            },
            "renderOrderBiasProperty": {
              "description": "Property that is used to hold the z-order delta in [renderOrderBiasRange].",
              "type": "string"
            },
            "renderOrderBiasRange": {
              "description": "Minimum and maximum z-order delta values.",
              "items": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
              "type": "boolean"
            },
            "wireframe": {
              "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "debug": {
          "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
          "type": "boolean"
        },
        "description": {
          "description": "Human readable description.",
          "type": "string"
        },
        "final": {
          "description": "Optional. If `true`, no more matching styles will be evaluated.",
          "type": "boolean"
        },
        "labelProperty": {
          "description": "XYZ defines the property to display as text label of a feature in the styles.",
          "type": "string"
        },
        "metricUnit": {
          "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
          "enum": [
            "Meter",
            "Pixel"
          ],
          "type": "string"
        },
        "renderOrder": {
          "description": "Specify `renderOrder` of object.",
          "type": "number"
        },
        "renderOrderBiasGroup": {
          "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
          "type": "string"
        },
        "renderOrderBiasProperty": {
          "description": "Property that is used to hold the z-order delta.",
          "type": "string"
        },
        "renderOrderBiasRange": {
          "description": "Minimum and maximum z-order delta values.",
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "styles": {
          "$ref": "#/definitions/StyleSet",
          "description": "Array of substyles."
        },
        "technique": {
          "description": "Technique name. Must be one of `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, or `\"none\"`.",
          "enum": [
            "fill"
          ],
          "type": "string"
        },
        "transient": {
          "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
          "type": "boolean"
        },
        "when": {
          "description": "Compile-time condition.",
          "type": "string"
        }
      },
      "required": [
        "technique",
        "when"
      ],
      "type": "object"
    },
    "Fog": {
      "additionalProperties": false,
      "description": "Interface that defines the options to configure the sky",
      "properties": {
        "startRatio": {
          "type": "number"
        }
      },
      "required": [
        "startRatio"
      ],
      "type": "object"
    },
    "FontCatalogConfig": {
      "additionalProperties": false,
      "description": "Fonts used for all text related rendering.",
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "url",
        "name"
      ],
      "type": "object"
    },
    "ImageDefinition": {
      "additionalProperties": false,
      "description": "Define an image (e.g. icon).",
      "properties": {
        "atlas": {
          "description": "Url of JSON file containing the texture atlas",
          "type": "string"
        },
        "preload": {
          "description": "`true` to start loading at init tile, `false` to lazily wait until required.",
          "type": "boolean"
        },
        "url": {
          "description": "Url to load content from.",
          "type": "string"
        }
      },
      "required": [
        "url",
        "preload"
      ],
      "type": "object"
    },
    "ImageDefinitions": {
      "additionalProperties": {
        "$ref": "#/definitions/ImageDefinition",
        "description": "Name of Image."
      },
      "type": "object"
    },
    "ImageTexture": {
      "additionalProperties": false,
      "description": "Can be used to create a texture atlas.",
      "properties": {
        "flipH": {
          "description": "Defaults to false.",
          "type": "boolean"
        },
        "flipV": {
          "description": "Defaults to false.",
          "type": "boolean"
        },
        "height": {
          "description": "Specify sub-region:  Defaults to 0, meaning height is taken from loaded image.",
          "type": "number"
        },
        "image": {
          "description": "Name of ImageDefinition to use.",
          "type": "string"
        },
        "name": {
          "description": "Name of ImageTexture. Used to reference texture in the styles.",
          "type": "string"
        },
        "opacity": {
          "description": "Defaults to 1.",
          "type": "number"
        },
        "origin": {
          "description": "Origin of image, defaults to \"topleft\"",
          "type": "string"
        },
        "width": {
          "description": "Specify sub-region:  Defaults to 0, meaning width is taken from loaded image.",
          "type": "number"
        },
        "xOffset": {
          "description": "Specify sub-region: Defaults to 0.",
          "type": "number"
        },
        "yOffset": {
          "description": "Specify sub-region: Defaults to 0.",
          "type": "number"
        }
      },
      "required": [
        "name",
        "image"
      ],
      "type": "object"
    },
    "InterpolatedPropertyDefinition<number>": {
      "additionalProperties": false,
      "description": "Interpolated property could have its value (some initial value should be provided) changed\naccording to an interpolation type.\n\nHere is an example of an interpolated property from a map style:\n\"lineWidth\": {\n  \"interpolation\": \"Linear\",\n  \"zoomLevels\": [13, 14, 15],\n  \"values\": [ 1.5, 1.2, 0.9]\n}",
      "properties": {
        "interpolation": {
          "enum": [
            "Discrete",
            "Linear",
            "Cubic"
          ],
          "type": "string"
        },
        "values": {
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "zoomLevels": {
          "items": {
            "type": "number"
          },
          "type": "array"
        }
      },
      "required": [
        "zoomLevels",
        "values"
      ],
      "type": "object"
    },
    "Light": {
      "anyOf": [
        {
          "$ref": "#/definitions/AmbientLight"
        },
        {
          "$ref": "#/definitions/DirectionalLight"
        }
      ],
      "description": "Possible lights used for light the map."
    },
    "LineMarkerStyle": {
      "additionalProperties": false,
      "description": "Render feature as line markers, which is a recurring marker along a line (usually road).",
      "properties": {
        "attr": {
          "additionalProperties": false,
          "description": "Make all properties in T optional",
          "properties": {
            "allCaps": {
              "description": "All caps style modifier.",
              "type": "boolean"
            },
            "alwaysOnTop": {
              "description": "If `true`, the label will always be rendered on top. If overlapping with other labels with\nthis flag set, the render order is undefined.",
              "type": "boolean"
            },
            "backgroundAlpha": {
              "description": "Background text alpha (opacity) value.",
              "type": "number"
            },
            "backgroundColor": {
              "description": "Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "type": "string"
            },
            "backgroundSize": {
              "description": "Size of the text background (pixels).",
              "type": "number"
            },
            "bold": {
              "description": "Bold style modifier.",
              "type": "boolean"
            },
            "color": {
              "description": "Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "type": "string"
            },
            "distanceScale": {
              "description": "Scaling factor of icon. Defaults to 0.5, reducing the size ot 50% in the distance.",
              "type": "number"
            },
            "fadeFar": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object becomes\ntransparent. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "fadeNear": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases).",
              "type": "number"
            },
            "hAlignment": {
              "description": "Horizontal alignment on a text line. Either `Left`, `Center` or `Right`.",
              "type": "string"
            },
            "iconFadeTime": {
              "description": "Fading time for icons in seconds.",
              "type": "number"
            },
            "iconIsOptional": {
              "description": "If true, the text will appear even if the icon cannot be rendered because of missing icon\ngraphics. Defaults to `true`.",
              "type": "boolean"
            },
            "iconMaxZoomLevel": {
              "description": "Maximum zoomLevel at which to display the label icon. No default.",
              "type": "number"
            },
            "iconMayOverlap": {
              "description": "If `false`, the icon may overlap text and other icons of lower priority. If not defined, the\nproperty value from `textMayOverlap` will be used.",
              "type": "boolean"
            },
            "iconMinZoomLevel": {
              "description": "Minimum zoomLevel at which to display the label icon. No default.",
              "type": "number"
            },
            "iconReserveSpace": {
              "description": "If `false`, icon will not reserve screen space, other markers will be able to overlap. If not\ndefined, the property value from `iconReserveSpace` will be used.",
              "type": "boolean"
            },
            "iconScale": {
              "description": "Scaling factor of icon.",
              "type": "number"
            },
            "iconXOffset": {
              "description": "Horizontal offset (to the right) in screen pixels.",
              "type": "number"
            },
            "iconYOffset": {
              "description": "Vertical offset (up) in screen pixels.",
              "type": "number"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "imageTexture": {
              "description": "Name of [[ImageTexture]] definition to use.",
              "type": "string"
            },
            "imageTextureField": {
              "description": "Field name to extract imageTexture content from.",
              "type": "string"
            },
            "imageTexturePostfix": {
              "description": "Postfix for `imageTexture` if `imageTextureField` is used.",
              "type": "string"
            },
            "imageTexturePrefix": {
              "description": "Prefix for `imageTexture` if `imageTextureField` is used.",
              "type": "string"
            },
            "label": {
              "description": "Field name of object containing the text to be rendered.",
              "type": "string"
            },
            "minDistance": {
              "description": "Minimal distance between markers in screen pixels.",
              "type": "number"
            },
            "oblique": {
              "description": "Oblique style modifier.",
              "type": "boolean"
            },
            "poiName": {
              "description": "Fixed name to identify POI options in the POI table. If `poiName` has a value, this value\nsupercedes any value read from the field referenced in `poiNameField`.",
              "type": "string"
            },
            "poiNameField": {
              "description": "Name of the field to evaluate to get the name of the POI options in the POI table.",
              "type": "string"
            },
            "poiTable": {
              "description": "Name of the POI table which should be used for this POI.",
              "type": "string"
            },
            "priority": {
              "description": "Priority of marker, defaults to `0`. Markers with highest priority get placed first.",
              "type": "number"
            },
            "renderOrder": {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonicaly increasing\nvalues according to style position in file.",
              "type": "number"
            },
            "renderOrderBiasGroup": {
              "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
              "type": "string"
            },
            "renderOrderBiasProperty": {
              "description": "Property that is used to hold the z-order delta in [renderOrderBiasRange].",
              "type": "string"
            },
            "renderOrderBiasRange": {
              "description": "Minimum and maximum z-order delta values.",
              "items": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "renderTextDuringMovements": {
              "description": "If `false`, text will not be rendered during animations. Defaults to `true`.",
              "type": "boolean"
            },
            "screenHeight": {
              "description": "Vertical height in pixels, controls vertical scaling. Overrides `iconScale`.",
              "type": "number"
            },
            "screenWidth": {
              "description": "Horizontal height in pixels, controls horizontal scaling. Overrides `iconScale`.",
              "type": "number"
            },
            "showOnMap": {
              "description": "Should be displayed on map or not. Defaults to `true`.",
              "type": "boolean"
            },
            "size": {
              "description": "Size of the text (pixels).",
              "type": "number"
            },
            "smallCaps": {
              "description": "Small caps style modifier.",
              "type": "boolean"
            },
            "stackMode": {
              "$ref": "#/definitions/PoiStackMode",
              "description": "Specify stack mode. Defaults to `ShowInStack`."
            },
            "style": {
              "description": "Name of the text style.",
              "type": "string"
            },
            "textFadeTime": {
              "description": "Fading time for labels in seconds.",
              "type": "number"
            },
            "textIsOptional": {
              "description": "If `true`, icon will appear even if the text part is blocked by other labels. Defaults to\n`false`.",
              "type": "boolean"
            },
            "textMaxZoomLevel": {
              "description": "Maximum zoomLevel at which to display the label text. No default.",
              "type": "number"
            },
            "textMayOverlap": {
              "description": "If `false`, text may overlap markers.",
              "type": "boolean"
            },
            "textMinZoomLevel": {
              "description": "Minimum zoomLevel at which to display the label text. No default.",
              "type": "number"
            },
            "textReserveSpace": {
              "description": "If `false`, text will not reserve screen space, other markers will be able to overlap.",
              "type": "boolean"
            },
            "tracking": {
              "type": "number"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "useAbbreviation": {
              "description": "If `true`, the abbreviation (field `name:short`) of the elements is used as text.",
              "type": "boolean"
            },
            "useIsoCode": {
              "description": "If `true`, the iso code (field 'iso_code') of the elements is used as text.\nThe `iso_code` field contains the ISO 3166-1 2-letter country code.",
              "type": "boolean"
            },
            "vAlignment": {
              "description": "Vertical alignment on a text line. Either `Above`, `Center` or `Below`.",
              "type": "string"
            },
            "xOffset": {
              "description": "Horizontal offset (to the right) in screen pixels.",
              "type": "number"
            },
            "yOffset": {
              "description": "Vertical offset (up) in screen pixels.",
              "type": "number"
            }
          },
          "type": "object"
        },
        "debug": {
          "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
          "type": "boolean"
        },
        "description": {
          "description": "Human readable description.",
          "type": "string"
        },
        "final": {
          "description": "Optional. If `true`, no more matching styles will be evaluated.",
          "type": "boolean"
        },
        "labelProperty": {
          "description": "XYZ defines the property to display as text label of a feature in the styles.",
          "type": "string"
        },
        "metricUnit": {
          "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
          "enum": [
            "Meter",
            "Pixel"
          ],
          "type": "string"
        },
        "renderOrder": {
          "description": "Specify `renderOrder` of object.",
          "type": "number"
        },
        "renderOrderBiasGroup": {
          "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
          "type": "string"
        },
        "renderOrderBiasProperty": {
          "description": "Property that is used to hold the z-order delta.",
          "type": "string"
        },
        "renderOrderBiasRange": {
          "description": "Minimum and maximum z-order delta values.",
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "styles": {
          "$ref": "#/definitions/StyleSet",
          "description": "Array of substyles."
        },
        "technique": {
          "description": "Technique name. Must be one of `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, or `\"none\"`.",
          "enum": [
            "line-marker"
          ],
          "type": "string"
        },
        "transient": {
          "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
          "type": "boolean"
        },
        "when": {
          "description": "Compile-time condition.",
          "type": "string"
        }
      },
      "required": [
        "technique",
        "when"
      ],
      "type": "object"
    },
    "LineStyle": {
      "additionalProperties": false,
      "description": "Render feature as line.",
      "properties": {
        "attr": {
          "additionalProperties": false,
          "description": "Make all properties in T optional",
          "properties": {
            "allCaps": {
              "description": "All caps style modifier.",
              "type": "boolean"
            },
            "alwaysOnTop": {
              "description": "If `true`, the label will always be rendered on top. If overlapping with other labels with\nthis flag set, the render order is undefined.",
              "type": "boolean"
            },
            "backgroundAlpha": {
              "description": "Background text alpha (opacity) value.",
              "type": "number"
            },
            "backgroundColor": {
              "description": "Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "type": "string"
            },
            "backgroundSize": {
              "description": "Size of the text background (pixels).",
              "type": "number"
            },
            "bold": {
              "description": "Bold style modifier.",
              "type": "boolean"
            },
            "color": {
              "description": "Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "type": "string"
            },
            "distanceScale": {
              "description": "Scaling factor of icon. Defaults to 0.5, reducing the size ot 50% in the distance.",
              "type": "number"
            },
            "fadeFar": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object becomes\ntransparent. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "fadeNear": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases).",
              "type": "number"
            },
            "hAlignment": {
              "description": "Horizontal alignment on a text line. Either `Left`, `Center` or `Right`.",
              "type": "string"
            },
            "iconFadeTime": {
              "description": "Fading time for icons in seconds.",
              "type": "number"
            },
            "iconIsOptional": {
              "description": "If true, the text will appear even if the icon cannot be rendered because of missing icon\ngraphics. Defaults to `true`.",
              "type": "boolean"
            },
            "iconMaxZoomLevel": {
              "description": "Maximum zoomLevel at which to display the label icon. No default.",
              "type": "number"
            },
            "iconMayOverlap": {
              "description": "If `false`, the icon may overlap text and other icons of lower priority. If not defined, the\nproperty value from `textMayOverlap` will be used.",
              "type": "boolean"
            },
            "iconMinZoomLevel": {
              "description": "Minimum zoomLevel at which to display the label icon. No default.",
              "type": "number"
            },
            "iconReserveSpace": {
              "description": "If `false`, icon will not reserve screen space, other markers will be able to overlap. If not\ndefined, the property value from `iconReserveSpace` will be used.",
              "type": "boolean"
            },
            "iconScale": {
              "description": "Scaling factor of icon.",
              "type": "number"
            },
            "iconXOffset": {
              "description": "Horizontal offset (to the right) in screen pixels.",
              "type": "number"
            },
            "iconYOffset": {
              "description": "Vertical offset (up) in screen pixels.",
              "type": "number"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "imageTexture": {
              "description": "Name of [[ImageTexture]] definition to use.",
              "type": "string"
            },
            "imageTextureField": {
              "description": "Field name to extract imageTexture content from.",
              "type": "string"
            },
            "imageTexturePostfix": {
              "description": "Postfix for `imageTexture` if `imageTextureField` is used.",
              "type": "string"
            },
            "imageTexturePrefix": {
              "description": "Prefix for `imageTexture` if `imageTextureField` is used.",
              "type": "string"
            },
            "label": {
              "description": "Field name of object containing the text to be rendered.",
              "type": "string"
            },
            "minDistance": {
              "description": "Minimal distance between markers in screen pixels.",
              "type": "number"
            },
            "oblique": {
              "description": "Oblique style modifier.",
              "type": "boolean"
            },
            "poiName": {
              "description": "Fixed name to identify POI options in the POI table. If `poiName` has a value, this value\nsupercedes any value read from the field referenced in `poiNameField`.",
              "type": "string"
            },
            "poiNameField": {
              "description": "Name of the field to evaluate to get the name of the POI options in the POI table.",
              "type": "string"
            },
            "poiTable": {
              "description": "Name of the POI table which should be used for this POI.",
              "type": "string"
            },
            "priority": {
              "description": "Priority of marker, defaults to `0`. Markers with highest priority get placed first.",
              "type": "number"
            },
            "renderOrder": {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonicaly increasing\nvalues according to style position in file.",
              "type": "number"
            },
            "renderOrderBiasGroup": {
              "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
              "type": "string"
            },
            "renderOrderBiasProperty": {
              "description": "Property that is used to hold the z-order delta in [renderOrderBiasRange].",
              "type": "string"
            },
            "renderOrderBiasRange": {
              "description": "Minimum and maximum z-order delta values.",
              "items": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "renderTextDuringMovements": {
              "description": "If `false`, text will not be rendered during animations. Defaults to `true`.",
              "type": "boolean"
            },
            "screenHeight": {
              "description": "Vertical height in pixels, controls vertical scaling. Overrides `iconScale`.",
              "type": "number"
            },
            "screenWidth": {
              "description": "Horizontal height in pixels, controls horizontal scaling. Overrides `iconScale`.",
              "type": "number"
            },
            "showOnMap": {
              "description": "Should be displayed on map or not. Defaults to `true`.",
              "type": "boolean"
            },
            "size": {
              "description": "Size of the text (pixels).",
              "type": "number"
            },
            "smallCaps": {
              "description": "Small caps style modifier.",
              "type": "boolean"
            },
            "stackMode": {
              "$ref": "#/definitions/PoiStackMode",
              "description": "Specify stack mode. Defaults to `ShowInStack`."
            },
            "style": {
              "description": "Name of the text style.",
              "type": "string"
            },
            "textFadeTime": {
              "description": "Fading time for labels in seconds.",
              "type": "number"
            },
            "textIsOptional": {
              "description": "If `true`, icon will appear even if the text part is blocked by other labels. Defaults to\n`false`.",
              "type": "boolean"
            },
            "textMaxZoomLevel": {
              "description": "Maximum zoomLevel at which to display the label text. No default.",
              "type": "number"
            },
            "textMayOverlap": {
              "description": "If `false`, text may overlap markers.",
              "type": "boolean"
            },
            "textMinZoomLevel": {
              "description": "Minimum zoomLevel at which to display the label text. No default.",
              "type": "number"
            },
            "textReserveSpace": {
              "description": "If `false`, text will not reserve screen space, other markers will be able to overlap.",
              "type": "boolean"
            },
            "tracking": {
              "type": "number"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "useAbbreviation": {
              "description": "If `true`, the abbreviation (field `name:short`) of the elements is used as text.",
              "type": "boolean"
            },
            "useIsoCode": {
              "description": "If `true`, the iso code (field 'iso_code') of the elements is used as text.\nThe `iso_code` field contains the ISO 3166-1 2-letter country code.",
              "type": "boolean"
            },
            "vAlignment": {
              "description": "Vertical alignment on a text line. Either `Above`, `Center` or `Below`.",
              "type": "string"
            },
            "xOffset": {
              "description": "Horizontal offset (to the right) in screen pixels.",
              "type": "number"
            },
            "yOffset": {
              "description": "Vertical offset (up) in screen pixels.",
              "type": "number"
            }
          },
          "type": "object"
        },
        "debug": {
          "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
          "type": "boolean"
        },
        "description": {
          "description": "Human readable description.",
          "type": "string"
        },
        "final": {
          "description": "Optional. If `true`, no more matching styles will be evaluated.",
          "type": "boolean"
        },
        "labelProperty": {
          "description": "XYZ defines the property to display as text label of a feature in the styles.",
          "type": "string"
        },
        "metricUnit": {
          "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
          "enum": [
            "Meter",
            "Pixel"
          ],
          "type": "string"
        },
        "renderOrder": {
          "description": "Specify `renderOrder` of object.",
          "type": "number"
        },
        "renderOrderBiasGroup": {
          "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
          "type": "string"
        },
        "renderOrderBiasProperty": {
          "description": "Property that is used to hold the z-order delta.",
          "type": "string"
        },
        "renderOrderBiasRange": {
          "description": "Minimum and maximum z-order delta values.",
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "secondaryRenderOrder": {
          "type": "number"
        },
        "styles": {
          "$ref": "#/definitions/StyleSet",
          "description": "Array of substyles."
        },
        "technique": {
          "description": "Technique name. Must be one of `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, or `\"none\"`.",
          "enum": [
            "line"
          ],
          "type": "string"
        },
        "transient": {
          "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
          "type": "boolean"
        },
        "when": {
          "description": "Compile-time condition.",
          "type": "string"
        }
      },
      "required": [
        "technique",
        "when"
      ],
      "type": "object"
    },
    "MagFilter": {
      "description": "Available texture magnification filters.",
      "enum": [
        "nearest",
        "linear"
      ],
      "type": "string"
    },
    "MaybeInterpolatedProperty<number>": {
      "anyOf": [
        {
          "type": "number"
        },
        {
          "$ref": "#/definitions/InterpolatedPropertyDefinition<number>"
        }
      ]
    },
    "MinFilter": {
      "description": "Available texture minification filters.",
      "enum": [
        "nearest",
        "nearestMipMapNearest",
        "nearestMipMapLinear",
        "linear",
        "linearMipMapNearest",
        "linearMipMapLinear"
      ],
      "type": "string"
    },
    "NoneStyle": {
      "additionalProperties": false,
      "properties": {
        "attr": {
          "type": "object"
        },
        "debug": {
          "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
          "type": "boolean"
        },
        "description": {
          "description": "Human readable description.",
          "type": "string"
        },
        "final": {
          "description": "Optional. If `true`, no more matching styles will be evaluated.",
          "type": "boolean"
        },
        "labelProperty": {
          "description": "XYZ defines the property to display as text label of a feature in the styles.",
          "type": "string"
        },
        "metricUnit": {
          "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
          "enum": [
            "Meter",
            "Pixel"
          ],
          "type": "string"
        },
        "renderOrder": {
          "description": "Specify `renderOrder` of object.",
          "type": "number"
        },
        "renderOrderBiasGroup": {
          "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
          "type": "string"
        },
        "renderOrderBiasProperty": {
          "description": "Property that is used to hold the z-order delta.",
          "type": "string"
        },
        "renderOrderBiasRange": {
          "description": "Minimum and maximum z-order delta values.",
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "styles": {
          "$ref": "#/definitions/StyleSet",
          "description": "Array of substyles."
        },
        "technique": {
          "description": "Technique name. Must be one of `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, or `\"none\"`.",
          "enum": [
            "none"
          ],
          "type": "string"
        },
        "transient": {
          "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
          "type": "boolean"
        },
        "when": {
          "description": "Compile-time condition.",
          "type": "string"
        }
      },
      "required": [
        "technique",
        "when"
      ],
      "type": "object"
    },
    "PixelFormat": {
      "enum": [
        "Alpha",
        "RGB",
        "RGBA",
        "Luminance",
        "LuminanceAlpha",
        "RGBE",
        "Depth",
        "DepthStencil",
        "Red"
      ],
      "type": "string"
    },
    "PoiStackMode": {
      "description": "Define the stacking option. Enum values for theme file are in \"kebab-case\".",
      "enum": [
        "show-in-stack",
        "hide-in-stack",
        "show-parent"
      ],
      "type": "string"
    },
    "PoiStyle": {
      "additionalProperties": false,
      "description": "Render feature as POIs (icons and text) rendered in screen space.",
      "properties": {
        "attr": {
          "additionalProperties": false,
          "description": "Make all properties in T optional",
          "properties": {
            "allCaps": {
              "description": "All caps style modifier.",
              "type": "boolean"
            },
            "alwaysOnTop": {
              "description": "If `true`, the label will always be rendered on top. If overlapping with other labels with\nthis flag set, the render order is undefined.",
              "type": "boolean"
            },
            "backgroundAlpha": {
              "description": "Background text alpha (opacity) value.",
              "type": "number"
            },
            "backgroundColor": {
              "description": "Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "type": "string"
            },
            "backgroundSize": {
              "description": "Size of the text background (pixels).",
              "type": "number"
            },
            "bold": {
              "description": "Bold style modifier.",
              "type": "boolean"
            },
            "color": {
              "description": "Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "type": "string"
            },
            "distanceScale": {
              "description": "Scaling factor of icon. Defaults to 0.5, reducing the size ot 50% in the distance.",
              "type": "number"
            },
            "fadeFar": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object becomes\ntransparent. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "fadeNear": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases).",
              "type": "number"
            },
            "hAlignment": {
              "description": "Horizontal alignment on a text line. Either `Left`, `Center` or `Right`.",
              "type": "string"
            },
            "iconFadeTime": {
              "description": "Fading time for icons in seconds.",
              "type": "number"
            },
            "iconIsOptional": {
              "description": "If true, the text will appear even if the icon cannot be rendered because of missing icon\ngraphics. Defaults to `true`.",
              "type": "boolean"
            },
            "iconMaxZoomLevel": {
              "description": "Maximum zoomLevel at which to display the label icon. No default.",
              "type": "number"
            },
            "iconMayOverlap": {
              "description": "If `false`, the icon may overlap text and other icons of lower priority. If not defined, the\nproperty value from `textMayOverlap` will be used.",
              "type": "boolean"
            },
            "iconMinZoomLevel": {
              "description": "Minimum zoomLevel at which to display the label icon. No default.",
              "type": "number"
            },
            "iconReserveSpace": {
              "description": "If `false`, icon will not reserve screen space, other markers will be able to overlap. If not\ndefined, the property value from `iconReserveSpace` will be used.",
              "type": "boolean"
            },
            "iconScale": {
              "description": "Scaling factor of icon.",
              "type": "number"
            },
            "iconXOffset": {
              "description": "Horizontal offset (to the right) in screen pixels.",
              "type": "number"
            },
            "iconYOffset": {
              "description": "Vertical offset (up) in screen pixels.",
              "type": "number"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "imageTexture": {
              "description": "Name of [[ImageTexture]] definition to use.",
              "type": "string"
            },
            "imageTextureField": {
              "description": "Field name to extract imageTexture content from.",
              "type": "string"
            },
            "imageTexturePostfix": {
              "description": "Postfix for `imageTexture` if `imageTextureField` is used.",
              "type": "string"
            },
            "imageTexturePrefix": {
              "description": "Prefix for `imageTexture` if `imageTextureField` is used.",
              "type": "string"
            },
            "label": {
              "description": "Field name of object containing the text to be rendered.",
              "type": "string"
            },
            "minDistance": {
              "description": "Minimal distance between markers in screen pixels.",
              "type": "number"
            },
            "oblique": {
              "description": "Oblique style modifier.",
              "type": "boolean"
            },
            "poiName": {
              "description": "Fixed name to identify POI options in the POI table. If `poiName` has a value, this value\nsupercedes any value read from the field referenced in `poiNameField`.",
              "type": "string"
            },
            "poiNameField": {
              "description": "Name of the field to evaluate to get the name of the POI options in the POI table.",
              "type": "string"
            },
            "poiTable": {
              "description": "Name of the POI table which should be used for this POI.",
              "type": "string"
            },
            "priority": {
              "description": "Priority of marker, defaults to `0`. Markers with highest priority get placed first.",
              "type": "number"
            },
            "renderOrder": {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonicaly increasing\nvalues according to style position in file.",
              "type": "number"
            },
            "renderOrderBiasGroup": {
              "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
              "type": "string"
            },
            "renderOrderBiasProperty": {
              "description": "Property that is used to hold the z-order delta in [renderOrderBiasRange].",
              "type": "string"
            },
            "renderOrderBiasRange": {
              "description": "Minimum and maximum z-order delta values.",
              "items": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "renderTextDuringMovements": {
              "description": "If `false`, text will not be rendered during animations. Defaults to `true`.",
              "type": "boolean"
            },
            "screenHeight": {
              "description": "Vertical height in pixels, controls vertical scaling. Overrides `iconScale`.",
              "type": "number"
            },
            "screenWidth": {
              "description": "Horizontal height in pixels, controls horizontal scaling. Overrides `iconScale`.",
              "type": "number"
            },
            "showOnMap": {
              "description": "Should be displayed on map or not. Defaults to `true`.",
              "type": "boolean"
            },
            "size": {
              "description": "Size of the text (pixels).",
              "type": "number"
            },
            "smallCaps": {
              "description": "Small caps style modifier.",
              "type": "boolean"
            },
            "stackMode": {
              "$ref": "#/definitions/PoiStackMode",
              "description": "Specify stack mode. Defaults to `ShowInStack`."
            },
            "style": {
              "description": "Name of the text style.",
              "type": "string"
            },
            "textFadeTime": {
              "description": "Fading time for labels in seconds.",
              "type": "number"
            },
            "textIsOptional": {
              "description": "If `true`, icon will appear even if the text part is blocked by other labels. Defaults to\n`false`.",
              "type": "boolean"
            },
            "textMaxZoomLevel": {
              "description": "Maximum zoomLevel at which to display the label text. No default.",
              "type": "number"
            },
            "textMayOverlap": {
              "description": "If `false`, text may overlap markers.",
              "type": "boolean"
            },
            "textMinZoomLevel": {
              "description": "Minimum zoomLevel at which to display the label text. No default.",
              "type": "number"
            },
            "textReserveSpace": {
              "description": "If `false`, text will not reserve screen space, other markers will be able to overlap.",
              "type": "boolean"
            },
            "tracking": {
              "type": "number"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "useAbbreviation": {
              "description": "If `true`, the abbreviation (field `name:short`) of the elements is used as text.",
              "type": "boolean"
            },
            "useIsoCode": {
              "description": "If `true`, the iso code (field 'iso_code') of the elements is used as text.\nThe `iso_code` field contains the ISO 3166-1 2-letter country code.",
              "type": "boolean"
            },
            "vAlignment": {
              "description": "Vertical alignment on a text line. Either `Above`, `Center` or `Below`.",
              "type": "string"
            },
            "xOffset": {
              "description": "Horizontal offset (to the right) in screen pixels.",
              "type": "number"
            },
            "yOffset": {
              "description": "Vertical offset (up) in screen pixels.",
              "type": "number"
            }
          },
          "type": "object"
        },
        "debug": {
          "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
          "type": "boolean"
        },
        "description": {
          "description": "Human readable description.",
          "type": "string"
        },
        "final": {
          "description": "Optional. If `true`, no more matching styles will be evaluated.",
          "type": "boolean"
        },
        "labelProperty": {
          "description": "XYZ defines the property to display as text label of a feature in the styles.",
          "type": "string"
        },
        "metricUnit": {
          "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
          "enum": [
            "Meter",
            "Pixel"
          ],
          "type": "string"
        },
        "renderOrder": {
          "description": "Specify `renderOrder` of object.",
          "type": "number"
        },
        "renderOrderBiasGroup": {
          "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
          "type": "string"
        },
        "renderOrderBiasProperty": {
          "description": "Property that is used to hold the z-order delta.",
          "type": "string"
        },
        "renderOrderBiasRange": {
          "description": "Minimum and maximum z-order delta values.",
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "styles": {
          "$ref": "#/definitions/StyleSet",
          "description": "Array of substyles."
        },
        "technique": {
          "description": "Technique name. Must be one of `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, or `\"none\"`.",
          "enum": [
            "labeled-icon"
          ],
          "type": "string"
        },
        "transient": {
          "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
          "type": "boolean"
        },
        "when": {
          "description": "Compile-time condition.",
          "type": "string"
        }
      },
      "required": [
        "technique",
        "when"
      ],
      "type": "object"
    },
    "PoiTableRef": {
      "additionalProperties": false,
      "description": "Definition for a [[PoiTable]] reference as part of the [[Theme]] object.",
      "properties": {
        "name": {
          "description": "Required name of the [[PoiTable]] for later reference.",
          "type": "string"
        },
        "url": {
          "description": "Required URL from where to load [[PoiTable]].\n\nShould refer to JSON that is matched [[PoiTableDef]] interface.",
          "type": "string"
        },
        "useAltNamesForKey": {
          "description": "If set to `true`, the list of values in the field \"altNames\" will be used as names for this\nPOI.",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "url",
        "useAltNamesForKey"
      ],
      "type": "object"
    },
    "SegmentsStyle": {
      "additionalProperties": false,
      "description": "Render feature as segments.",
      "properties": {
        "attr": {
          "additionalProperties": false,
          "description": "Make all properties in T optional",
          "properties": {
            "color": {
              "description": "Color of segments in a hexadecimal notation, for example: `\"#e4e9ec\"` or `\"#fff\"`.",
              "type": "string"
            },
            "fadeFar": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "fadeNear": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases).",
              "type": "number"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "lineWidth": {
              "$ref": "#/definitions/MaybeInterpolatedProperty<number>",
              "description": "Width of a line in meters."
            },
            "opacity": {
              "description": "For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\nopaque.",
              "type": "number"
            },
            "renderOrder": {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonicaly increasing\nvalues according to style position in file.",
              "type": "number"
            },
            "renderOrderBiasGroup": {
              "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
              "type": "string"
            },
            "renderOrderBiasProperty": {
              "description": "Property that is used to hold the z-order delta in [renderOrderBiasRange].",
              "type": "string"
            },
            "renderOrderBiasRange": {
              "description": "Minimum and maximum z-order delta values.",
              "items": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "debug": {
          "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
          "type": "boolean"
        },
        "description": {
          "description": "Human readable description.",
          "type": "string"
        },
        "final": {
          "description": "Optional. If `true`, no more matching styles will be evaluated.",
          "type": "boolean"
        },
        "labelProperty": {
          "description": "XYZ defines the property to display as text label of a feature in the styles.",
          "type": "string"
        },
        "metricUnit": {
          "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
          "enum": [
            "Meter",
            "Pixel"
          ],
          "type": "string"
        },
        "renderOrder": {
          "description": "Specify `renderOrder` of object.",
          "type": "number"
        },
        "renderOrderBiasGroup": {
          "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
          "type": "string"
        },
        "renderOrderBiasProperty": {
          "description": "Property that is used to hold the z-order delta.",
          "type": "string"
        },
        "renderOrderBiasRange": {
          "description": "Minimum and maximum z-order delta values.",
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "styles": {
          "$ref": "#/definitions/StyleSet",
          "description": "Array of substyles."
        },
        "technique": {
          "description": "Technique name. Must be one of `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, or `\"none\"`.",
          "enum": [
            "segments"
          ],
          "type": "string"
        },
        "transient": {
          "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
          "type": "boolean"
        },
        "when": {
          "description": "Compile-time condition.",
          "type": "string"
        }
      },
      "required": [
        "technique",
        "when"
      ],
      "type": "object"
    },
    "ShaderStyle": {
      "additionalProperties": false,
      "properties": {
        "attr": {
          "additionalProperties": false,
          "description": "Make all properties in T optional",
          "properties": {
            "fadeFar": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "fadeNear": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases).",
              "type": "number"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "params": {
              "$ref": "#/definitions/ShaderTechniqueMaterialParameters",
              "description": "Parameters for shader. See `THREE.ShaderMaterialParameters`."
            },
            "primitive": {
              "description": "Type of primitive for the shader technique. Valid values are \"point\" | \"line\" | \"segments\" |\n\"mesh\"",
              "enum": [
                "point",
                "line",
                "segments",
                "mesh"
              ],
              "type": "string"
            },
            "renderOrder": {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonicaly increasing\nvalues according to style position in file.",
              "type": "number"
            },
            "renderOrderBiasGroup": {
              "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
              "type": "string"
            },
            "renderOrderBiasProperty": {
              "description": "Property that is used to hold the z-order delta in [renderOrderBiasRange].",
              "type": "string"
            },
            "renderOrderBiasRange": {
              "description": "Minimum and maximum z-order delta values.",
              "items": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "debug": {
          "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
          "type": "boolean"
        },
        "description": {
          "description": "Human readable description.",
          "type": "string"
        },
        "final": {
          "description": "Optional. If `true`, no more matching styles will be evaluated.",
          "type": "boolean"
        },
        "labelProperty": {
          "description": "XYZ defines the property to display as text label of a feature in the styles.",
          "type": "string"
        },
        "metricUnit": {
          "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
          "enum": [
            "Meter",
            "Pixel"
          ],
          "type": "string"
        },
        "renderOrder": {
          "description": "Specify `renderOrder` of object.",
          "type": "number"
        },
        "renderOrderBiasGroup": {
          "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
          "type": "string"
        },
        "renderOrderBiasProperty": {
          "description": "Property that is used to hold the z-order delta.",
          "type": "string"
        },
        "renderOrderBiasRange": {
          "description": "Minimum and maximum z-order delta values.",
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "styles": {
          "$ref": "#/definitions/StyleSet",
          "description": "Array of substyles."
        },
        "technique": {
          "description": "Technique name. Must be one of `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, or `\"none\"`.",
          "enum": [
            "shader"
          ],
          "type": "string"
        },
        "transient": {
          "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
          "type": "boolean"
        },
        "when": {
          "description": "Compile-time condition.",
          "type": "string"
        }
      },
      "required": [
        "technique",
        "when"
      ],
      "type": "object"
    },
    "ShaderTechniqueMaterialParameters": {
      "type": "object"
    },
    "Sky": {
      "additionalProperties": false,
      "description": "Interface that defines the options to configure the sky",
      "properties": {
        "colorBottom": {
          "type": "string"
        },
        "colorTop": {
          "type": "string"
        },
        "groundColor": {
          "type": "string"
        },
        "monomialPower": {
          "type": "number"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "colorTop",
        "colorBottom",
        "groundColor"
      ],
      "type": "object"
    },
    "SolidLineStyle": {
      "additionalProperties": false,
      "properties": {
        "attr": {
          "additionalProperties": false,
          "description": "Make all properties in T optional",
          "properties": {
            "clipping": {
              "description": "Clip the line outside the tile if `true`.",
              "type": "boolean"
            },
            "color": {
              "description": "Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "type": "string"
            },
            "fadeFar": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "fadeNear": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases).",
              "type": "number"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "lineColor": {
              "description": "Sets the polygon outline color.",
              "type": "string"
            },
            "lineFadeFar": {
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "lineFadeNear": {
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out.",
              "type": "number"
            },
            "lineWidth": {
              "$ref": "#/definitions/MaybeInterpolatedProperty<number>",
              "description": "Width of a line in `metricUnit`s for different zoom levels."
            },
            "metricUnit": {
              "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
              "type": "string"
            },
            "name": {
              "description": "Name of technique. Is used in the theme file.",
              "enum": [
                "solid-line"
              ],
              "type": "string"
            },
            "opacity": {
              "description": "For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\nopaque.",
              "type": "number"
            },
            "polygonOffset": {
              "description": "Whether to use polygon offset. Default is false. This corresponds to the\nGL_POLYGON_OFFSET_FILL WebGL feature.\n\nPolygonOffset is used to raise the geometry towards the geometry (for depth calculation\nonly). Default is false.\n\nSee here: https://sites.google.com/site/threejstuts/home/polygon_offset\n\nTo activate polygonOffset these values have to be set to pull the line \"forwards\":\n\ntransparent: true\n\npolygonOffset: true\n\npolygonOffsetFactor : -1.0, (as an example, see link above)\n\npolygonOffsetUnits: -1 (as an example, see link above)",
              "type": "boolean"
            },
            "polygonOffsetFactor": {
              "description": "Sets the polygon offset factor. Default is 0.",
              "type": "number"
            },
            "polygonOffsetUnits": {
              "description": "Sets the polygon offset units. Default is 0.",
              "type": "number"
            },
            "renderOrder": {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonicaly increasing\nvalues according to style position in file.",
              "type": "number"
            },
            "renderOrderBiasGroup": {
              "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
              "type": "string"
            },
            "renderOrderBiasProperty": {
              "description": "Property that is used to hold the z-order delta in [renderOrderBiasRange].",
              "type": "string"
            },
            "renderOrderBiasRange": {
              "description": "Minimum and maximum z-order delta values.",
              "items": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "secondaryColor": {
              "description": "Color of secondary line geometry in hexadecimal or CSS-style notation, for example:\n`\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "type": "string"
            },
            "secondaryRenderOrder": {
              "description": "The render order of the secondary line geometry object created using this technique.",
              "type": "number"
            },
            "secondaryWidth": {
              "description": "Width of secondary line geometry in `metricUnit`s for different zoom levels.",
              "type": "number"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "debug": {
          "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
          "type": "boolean"
        },
        "description": {
          "description": "Human readable description.",
          "type": "string"
        },
        "final": {
          "description": "Optional. If `true`, no more matching styles will be evaluated.",
          "type": "boolean"
        },
        "labelProperty": {
          "description": "XYZ defines the property to display as text label of a feature in the styles.",
          "type": "string"
        },
        "metricUnit": {
          "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
          "enum": [
            "Meter",
            "Pixel"
          ],
          "type": "string"
        },
        "renderOrder": {
          "description": "Specify `renderOrder` of object.",
          "type": "number"
        },
        "renderOrderBiasGroup": {
          "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
          "type": "string"
        },
        "renderOrderBiasProperty": {
          "description": "Property that is used to hold the z-order delta.",
          "type": "string"
        },
        "renderOrderBiasRange": {
          "description": "Minimum and maximum z-order delta values.",
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "secondaryRenderOrder": {
          "type": "number"
        },
        "styles": {
          "$ref": "#/definitions/StyleSet",
          "description": "Array of substyles."
        },
        "technique": {
          "description": "Technique name. Must be one of `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, or `\"none\"`.",
          "enum": [
            "solid-line"
          ],
          "type": "string"
        },
        "transient": {
          "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
          "type": "boolean"
        },
        "when": {
          "description": "Compile-time condition.",
          "type": "string"
        }
      },
      "required": [
        "technique",
        "when"
      ],
      "type": "object"
    },
    "SquaresStyle": {
      "additionalProperties": false,
      "description": "Render feature as set of squares rendered in screen space.",
      "properties": {
        "attr": {
          "additionalProperties": false,
          "description": "Make all properties in T optional",
          "properties": {
            "color": {
              "description": "Color of a point in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "type": "string"
            },
            "enablePicking": {
              "description": "Whether to enable picking on these points.",
              "type": "boolean"
            },
            "fadeFar": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "fadeNear": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases).",
              "type": "number"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "opacity": {
              "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.",
              "type": "number"
            },
            "renderOrder": {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonicaly increasing\nvalues according to style position in file.",
              "type": "number"
            },
            "renderOrderBiasGroup": {
              "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
              "type": "string"
            },
            "renderOrderBiasProperty": {
              "description": "Property that is used to hold the z-order delta in [renderOrderBiasRange].",
              "type": "string"
            },
            "renderOrderBiasRange": {
              "description": "Minimum and maximum z-order delta values.",
              "items": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "size": {
              "description": "Size of point in pixels.",
              "type": "number"
            },
            "texture": {
              "description": "URL of a texture image to be loaded.",
              "type": "string"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to `true` if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "debug": {
          "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
          "type": "boolean"
        },
        "description": {
          "description": "Human readable description.",
          "type": "string"
        },
        "final": {
          "description": "Optional. If `true`, no more matching styles will be evaluated.",
          "type": "boolean"
        },
        "labelProperty": {
          "description": "XYZ defines the property to display as text label of a feature in the styles.",
          "type": "string"
        },
        "metricUnit": {
          "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
          "enum": [
            "Meter",
            "Pixel"
          ],
          "type": "string"
        },
        "renderOrder": {
          "description": "Specify `renderOrder` of object.",
          "type": "number"
        },
        "renderOrderBiasGroup": {
          "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
          "type": "string"
        },
        "renderOrderBiasProperty": {
          "description": "Property that is used to hold the z-order delta.",
          "type": "string"
        },
        "renderOrderBiasRange": {
          "description": "Minimum and maximum z-order delta values.",
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "styles": {
          "$ref": "#/definitions/StyleSet",
          "description": "Array of substyles."
        },
        "technique": {
          "description": "Technique name. Must be one of `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, or `\"none\"`.",
          "enum": [
            "squares"
          ],
          "type": "string"
        },
        "transient": {
          "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
          "type": "boolean"
        },
        "when": {
          "description": "Compile-time condition.",
          "type": "string"
        }
      },
      "required": [
        "technique",
        "when"
      ],
      "type": "object"
    },
    "StandardExtrudedLineStyle": {
      "additionalProperties": false,
      "properties": {
        "attr": {
          "additionalProperties": false,
          "description": "Make all properties in T optional",
          "properties": {
            "alphaTest": {
              "description": "The material will not be rendered if the opacity is lower than this value.\nSee https://threejs.org/docs/#api/en/materials/Material.alphaTest.",
              "type": "number"
            },
            "caps": {
              "description": "Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to\n`\"Circle\"`.",
              "enum": [
                "None",
                "Circle"
              ],
              "type": "string"
            },
            "color": {
              "description": "Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.",
              "type": "string"
            },
            "depthTest": {
              "description": "Skip rendering clobbered pixels.\nSee https://threejs.org/docs/#api/en/materials/Material.depthTest.",
              "type": "boolean"
            },
            "emissive": {
              "description": "Emissive (light) color of the material, essentially a solid color unaffected by other\nlighting. Default is black.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.",
              "type": "string"
            },
            "emissiveIntensity": {
              "description": "Intensity of the emissive light. Modulates the emissive color. Default is `1`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity.",
              "type": "number"
            },
            "enableDepthPrePass": {
              "description": "Control rendering of depth prepass before the actual geometry.\n\nDepth prepass is a method to render translucent meshes, hence only the visible front faces of\na mesh are actually rendered, removing artifacts caused by blending with internal faces of\nthe mesh. This method is used for drawing translucent buildings over map background.\n\nBy default, each [[DataSource]] determines how/if enable the depth pre-pass. A value of\n`false` forcefully disables depth prepass.",
              "type": "boolean"
            },
            "fadeFar": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "fadeNear": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases).",
              "type": "number"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "lineColor": {
              "description": "Sets the polygon outline color.",
              "type": "string"
            },
            "lineFadeFar": {
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\ntransparent. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "lineFadeNear": {
              "description": "Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\nfading out.",
              "type": "number"
            },
            "lineWidth": {
              "$ref": "#/definitions/MaybeInterpolatedProperty<number>",
              "description": "Width of a line in meters for different zoom levels."
            },
            "metalness": {
              "description": "How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\nmetallic ones use `1.0`, with nothing (usually) in between. Default is `0.5`. A value between\n`0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\nvalues are multiplied.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness.",
              "type": "number"
            },
            "opacity": {
              "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.\nSee https://threejs.org/docs/#api/en/materials/Material.opacity.",
              "type": "number"
            },
            "polygonOffset": {
              "description": "Whether to use polygon offset. Default is false. This corresponds to the\nGL_POLYGON_OFFSET_FILL WebGL feature.\n\nPolygonOffset is used to raise the geometry towards the geometry (for depth calculation\nonly). Default is false.\n\nSee here: https://sites.google.com/site/threejstuts/home/polygon_offset\n\nTo activate polygonOffset these values have to be set to pull the line \"forwards\":\n\ntransparent: true\n\npolygonOffset: true\n\npolygonOffsetFactor : -1.0, (as an example, see link above)\n\npolygonOffsetUnits: -1 (as an example, see link above)",
              "type": "boolean"
            },
            "polygonOffsetFactor": {
              "description": "Sets the polygon offset factor. Default is 0.",
              "type": "number"
            },
            "polygonOffsetUnits": {
              "description": "Sets the polygon offset units. Default is 0.",
              "type": "number"
            },
            "refractionRatio": {
              "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\nthe material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n`THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n  is `0.98`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio.",
              "type": "number"
            },
            "renderOrder": {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonicaly increasing\nvalues according to style position in file.",
              "type": "number"
            },
            "renderOrderBiasGroup": {
              "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
              "type": "string"
            },
            "renderOrderBiasProperty": {
              "description": "Property that is used to hold the z-order delta in [renderOrderBiasRange].",
              "type": "string"
            },
            "renderOrderBiasRange": {
              "description": "Minimum and maximum z-order delta values.",
              "items": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "roughness": {
              "description": "How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\ndiffuse. Default is `0.5`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness.",
              "type": "number"
            },
            "shading": {
              "description": "A value determining the shading technique. Valid values are `\"basic\"` and `\"standard\"`.\nDefault is `\"basic\"`.\n\n`\"basic\"` : Simple shading, faster to render. Only simple color and opacity are effective.\n`\"standard\"` : Elaborate shading, with metalness, and roughness.",
              "enum": [
                "standard"
              ],
              "type": "string"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.\nSee https://threejs.org/docs/#api/en/materials/Material.transparent.",
              "type": "boolean"
            },
            "vertexColors": {
              "description": "If `vertexColors` is `true`, every vertex has color information, which is interpolated\nbetween vertices.\nSee https://threejs.org/docs/#api/en/materials/Material.vertexColors.",
              "type": "boolean"
            },
            "wireframe": {
              "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "debug": {
          "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
          "type": "boolean"
        },
        "description": {
          "description": "Human readable description.",
          "type": "string"
        },
        "final": {
          "description": "Optional. If `true`, no more matching styles will be evaluated.",
          "type": "boolean"
        },
        "labelProperty": {
          "description": "XYZ defines the property to display as text label of a feature in the styles.",
          "type": "string"
        },
        "metricUnit": {
          "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
          "enum": [
            "Meter",
            "Pixel"
          ],
          "type": "string"
        },
        "renderOrder": {
          "description": "Specify `renderOrder` of object.",
          "type": "number"
        },
        "renderOrderBiasGroup": {
          "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
          "type": "string"
        },
        "renderOrderBiasProperty": {
          "description": "Property that is used to hold the z-order delta.",
          "type": "string"
        },
        "renderOrderBiasRange": {
          "description": "Minimum and maximum z-order delta values.",
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "shading": {
          "enum": [
            "standard"
          ],
          "type": "string"
        },
        "styles": {
          "$ref": "#/definitions/StyleSet",
          "description": "Array of substyles."
        },
        "technique": {
          "description": "Technique name. Must be one of `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, or `\"none\"`.",
          "enum": [
            "extruded-line"
          ],
          "type": "string"
        },
        "transient": {
          "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
          "type": "boolean"
        },
        "when": {
          "description": "Compile-time condition.",
          "type": "string"
        }
      },
      "required": [
        "shading",
        "technique",
        "when"
      ],
      "type": "object"
    },
    "StandardStyle": {
      "additionalProperties": false,
      "properties": {
        "attr": {
          "additionalProperties": false,
          "description": "Make all properties in T optional",
          "properties": {
            "alphaTest": {
              "description": "The material will not be rendered if the opacity is lower than this value.\nSee https://threejs.org/docs/#api/en/materials/Material.alphaTest.",
              "type": "number"
            },
            "color": {
              "description": "Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.",
              "type": "string"
            },
            "depthTest": {
              "description": "Skip rendering clobbered pixels.\nSee https://threejs.org/docs/#api/en/materials/Material.depthTest.",
              "type": "boolean"
            },
            "emissive": {
              "description": "Emissive (light) color of the material, essentially a solid color unaffected by other\nlighting. Default is black.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.",
              "type": "string"
            },
            "emissiveIntensity": {
              "description": "Intensity of the emissive light. Modulates the emissive color. Default is `1`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity.",
              "type": "number"
            },
            "enableDepthPrePass": {
              "description": "Control rendering of depth prepass before the actual geometry.\n\nDepth prepass is a method to render translucent meshes, hence only the visible front faces of\na mesh are actually rendered, removing artifacts caused by blending with internal faces of\nthe mesh. This method is used for drawing translucent buildings over map background.\n\nBy default, each [[DataSource]] determines how/if enable the depth pre-pass. A value of\n`false` forcefully disables depth prepass.",
              "type": "boolean"
            },
            "fadeFar": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "fadeNear": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases).",
              "type": "number"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "metalness": {
              "description": "How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\nmetallic ones use `1.0`, with nothing (usually) in between. Default is `0.5`. A value between\n`0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\nvalues are multiplied.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness.",
              "type": "number"
            },
            "opacity": {
              "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.\nSee https://threejs.org/docs/#api/en/materials/Material.opacity.",
              "type": "number"
            },
            "refractionRatio": {
              "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\nthe material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n`THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n  is `0.98`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio.",
              "type": "number"
            },
            "renderOrder": {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonicaly increasing\nvalues according to style position in file.",
              "type": "number"
            },
            "renderOrderBiasGroup": {
              "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
              "type": "string"
            },
            "renderOrderBiasProperty": {
              "description": "Property that is used to hold the z-order delta in [renderOrderBiasRange].",
              "type": "string"
            },
            "renderOrderBiasRange": {
              "description": "Minimum and maximum z-order delta values.",
              "items": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "roughness": {
              "description": "How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\ndiffuse. Default is `0.5`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness.",
              "type": "number"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.\nSee https://threejs.org/docs/#api/en/materials/Material.transparent.",
              "type": "boolean"
            },
            "vertexColors": {
              "description": "If `vertexColors` is `true`, every vertex has color information, which is interpolated\nbetween vertices.\nSee https://threejs.org/docs/#api/en/materials/Material.vertexColors.",
              "type": "boolean"
            },
            "wireframe": {
              "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "debug": {
          "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
          "type": "boolean"
        },
        "description": {
          "description": "Human readable description.",
          "type": "string"
        },
        "final": {
          "description": "Optional. If `true`, no more matching styles will be evaluated.",
          "type": "boolean"
        },
        "labelProperty": {
          "description": "XYZ defines the property to display as text label of a feature in the styles.",
          "type": "string"
        },
        "metricUnit": {
          "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
          "enum": [
            "Meter",
            "Pixel"
          ],
          "type": "string"
        },
        "renderOrder": {
          "description": "Specify `renderOrder` of object.",
          "type": "number"
        },
        "renderOrderBiasGroup": {
          "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
          "type": "string"
        },
        "renderOrderBiasProperty": {
          "description": "Property that is used to hold the z-order delta.",
          "type": "string"
        },
        "renderOrderBiasRange": {
          "description": "Minimum and maximum z-order delta values.",
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "styles": {
          "$ref": "#/definitions/StyleSet",
          "description": "Array of substyles."
        },
        "technique": {
          "description": "Technique name. Must be one of `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, or `\"none\"`.",
          "enum": [
            "standard"
          ],
          "type": "string"
        },
        "transient": {
          "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
          "type": "boolean"
        },
        "when": {
          "description": "Compile-time condition.",
          "type": "string"
        }
      },
      "required": [
        "technique",
        "when"
      ],
      "type": "object"
    },
    "StandardTexturedStyle": {
      "additionalProperties": false,
      "properties": {
        "attr": {
          "additionalProperties": false,
          "description": "Make all properties in T optional",
          "properties": {
            "alphaMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as alpha map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap"
            },
            "alphaMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "alphaTest": {
              "description": "The material will not be rendered if the opacity is lower than this value.\nSee https://threejs.org/docs/#api/en/materials/Material.alphaTest.",
              "type": "number"
            },
            "bumpMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as bump map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap"
            },
            "bumpMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "color": {
              "description": "Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.",
              "type": "string"
            },
            "depthTest": {
              "description": "Skip rendering clobbered pixels.\nSee https://threejs.org/docs/#api/en/materials/Material.depthTest.",
              "type": "boolean"
            },
            "displacementMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as displacement map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap"
            },
            "displacementMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "emissive": {
              "description": "Emissive (light) color of the material, essentially a solid color unaffected by other\nlighting. Default is black.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.",
              "type": "string"
            },
            "emissiveIntensity": {
              "description": "Intensity of the emissive light. Modulates the emissive color. Default is `1`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity.",
              "type": "number"
            },
            "emissiveMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as emissive map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap"
            },
            "emissiveMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "enableDepthPrePass": {
              "description": "Control rendering of depth prepass before the actual geometry.\n\nDepth prepass is a method to render translucent meshes, hence only the visible front faces of\na mesh are actually rendered, removing artifacts caused by blending with internal faces of\nthe mesh. This method is used for drawing translucent buildings over map background.\n\nBy default, each [[DataSource]] determines how/if enable the depth pre-pass. A value of\n`false` forcefully disables depth prepass.",
              "type": "boolean"
            },
            "fadeFar": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "fadeNear": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases).",
              "type": "number"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "map": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as color map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.map"
            },
            "mapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "metalness": {
              "description": "How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\nmetallic ones use `1.0`, with nothing (usually) in between. Default is `0.5`. A value between\n`0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\nvalues are multiplied.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness.",
              "type": "number"
            },
            "metalnessMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as metalness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap"
            },
            "metalnessMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "normalMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as normal map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap"
            },
            "normalMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "normalMapType": {
              "type": "number"
            },
            "opacity": {
              "description": "For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.\nSee https://threejs.org/docs/#api/en/materials/Material.opacity.",
              "type": "number"
            },
            "refractionRatio": {
              "description": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\nthe material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n`THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n  is `0.98`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio.",
              "type": "number"
            },
            "renderOrder": {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonicaly increasing\nvalues according to style position in file.",
              "type": "number"
            },
            "renderOrderBiasGroup": {
              "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
              "type": "string"
            },
            "renderOrderBiasProperty": {
              "description": "Property that is used to hold the z-order delta in [renderOrderBiasRange].",
              "type": "string"
            },
            "renderOrderBiasRange": {
              "description": "Minimum and maximum z-order delta values.",
              "items": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "renderTexture": {
              "description": "Render texture if available.\n\nDefaults to true if `map` is available for mesh.\n\nMay be used to forcefully disable textures in theme even if textures are available.",
              "type": "boolean"
            },
            "roughness": {
              "description": "How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\ndiffuse. Default is `0.5`.\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness.",
              "type": "number"
            },
            "roughnessMap": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/definitions/TextureBuffer"
                }
              ],
              "description": "URL or texture buffer that should be used as roughness map. See:\nhttps://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap"
            },
            "roughnessMapProperties": {
              "$ref": "#/definitions/TextureProperties"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "transparent": {
              "description": "Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\nslight performance impact.\nSee https://threejs.org/docs/#api/en/materials/Material.transparent.",
              "type": "boolean"
            },
            "vertexColors": {
              "description": "If `vertexColors` is `true`, every vertex has color information, which is interpolated\nbetween vertices.\nSee https://threejs.org/docs/#api/en/materials/Material.vertexColors.",
              "type": "boolean"
            },
            "wireframe": {
              "description": "A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\nSee https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "debug": {
          "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
          "type": "boolean"
        },
        "description": {
          "description": "Human readable description.",
          "type": "string"
        },
        "final": {
          "description": "Optional. If `true`, no more matching styles will be evaluated.",
          "type": "boolean"
        },
        "labelProperty": {
          "description": "XYZ defines the property to display as text label of a feature in the styles.",
          "type": "string"
        },
        "metricUnit": {
          "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
          "enum": [
            "Meter",
            "Pixel"
          ],
          "type": "string"
        },
        "renderOrder": {
          "description": "Specify `renderOrder` of object.",
          "type": "number"
        },
        "renderOrderBiasGroup": {
          "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
          "type": "string"
        },
        "renderOrderBiasProperty": {
          "description": "Property that is used to hold the z-order delta.",
          "type": "string"
        },
        "renderOrderBiasRange": {
          "description": "Minimum and maximum z-order delta values.",
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "styles": {
          "$ref": "#/definitions/StyleSet",
          "description": "Array of substyles."
        },
        "technique": {
          "description": "Technique name. Must be one of `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, or `\"none\"`.",
          "enum": [
            "standard-textured"
          ],
          "type": "string"
        },
        "transient": {
          "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
          "type": "boolean"
        },
        "when": {
          "description": "Compile-time condition.",
          "type": "string"
        }
      },
      "required": [
        "technique",
        "when"
      ],
      "type": "object"
    },
    "Style": {
      "anyOf": [
        {
          "$ref": "#/definitions/SquaresStyle"
        },
        {
          "$ref": "#/definitions/CirclesStyle"
        },
        {
          "$ref": "#/definitions/PoiStyle"
        },
        {
          "$ref": "#/definitions/LineMarkerStyle"
        },
        {
          "$ref": "#/definitions/LineStyle"
        },
        {
          "$ref": "#/definitions/SegmentsStyle"
        },
        {
          "$ref": "#/definitions/SolidLineStyle"
        },
        {
          "$ref": "#/definitions/DashedLineStyle"
        },
        {
          "$ref": "#/definitions/FillStyle"
        },
        {
          "$ref": "#/definitions/StandardStyle"
        },
        {
          "$ref": "#/definitions/StandardTexturedStyle"
        },
        {
          "$ref": "#/definitions/BasicExtrudedLineStyle"
        },
        {
          "$ref": "#/definitions/StandardExtrudedLineStyle"
        },
        {
          "$ref": "#/definitions/ExtrudedPolygonStyle"
        },
        {
          "$ref": "#/definitions/ShaderStyle"
        },
        {
          "$ref": "#/definitions/TextStyle"
        },
        {
          "$ref": "#/definitions/NoneStyle"
        }
      ]
    },
    "StyleSet": {
      "description": "An array of [[Style]]s that are used together to define how a [[DataSource]] should be rendered.\n`StyleSet`s are applied to sources providing vector tiles via their method `setStyleSet`. This\nis also handle internally when a whole theme is passed to a [[MapView]] via `mapview.theme`.",
      "items": {
        "$ref": "#/definitions/Style"
      },
      "type": "array"
    },
    "Styles": {
      "additionalProperties": {
        "$ref": "#/definitions/StyleSet"
      },
      "description": "A dictionary of [[Styles]]s.",
      "type": "object"
    },
    "TextStyle": {
      "additionalProperties": false,
      "properties": {
        "attr": {
          "additionalProperties": false,
          "description": "Make all properties in T optional",
          "properties": {
            "allCaps": {
              "description": "All caps style modifier.",
              "type": "boolean"
            },
            "backgroundAlpha": {
              "description": "Background text alpha (opacity) value.",
              "type": "number"
            },
            "backgroundColor": {
              "description": "Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n`\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "type": "string"
            },
            "backgroundSize": {
              "$ref": "#/definitions/MaybeInterpolatedProperty<number>",
              "description": "Size of the text background (pixels)."
            },
            "bold": {
              "description": "Bold style modifier.",
              "type": "boolean"
            },
            "clipping": {
              "description": "Clip the line outside the tile if `true`.",
              "type": "boolean"
            },
            "color": {
              "description": "Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n`\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.",
              "type": "string"
            },
            "distanceScale": {
              "description": "Scaling factor of the text. Defaults to 0.5, reducing the size ot 50% in the distance.",
              "type": "number"
            },
            "fadeFar": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\nopacity and stops fading out. A value of <= 0.0 disables fading.",
              "type": "number"
            },
            "fadeNear": {
              "description": "Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\nfading out (opacity decreases).",
              "type": "number"
            },
            "hAlignment": {
              "description": "Horizontal alignment on a text line. Either `Left`, `Center` or `Right`.",
              "enum": [
                "Left",
                "Center",
                "Right"
              ],
              "type": "string"
            },
            "id": {
              "description": "The name used to identify materials created from this technique.",
              "type": "string"
            },
            "label": {
              "description": "Field name of object containing the text to be rendered.",
              "type": "string"
            },
            "maxZoomLevel": {
              "description": "Maximum zoom level. If the current zoom level is larger, the technique will not be used.",
              "type": "number"
            },
            "mayOverlap": {
              "description": "If `true`, icon is allowed to overlap other labels or icons of lower priority.",
              "type": "boolean"
            },
            "minZoomLevel": {
              "description": "Minimal zoom level. If the current zoom level is smaller, the technique will not be used.",
              "type": "number"
            },
            "oblique": {
              "description": "Oblique style modifier.",
              "type": "boolean"
            },
            "opacity": {
              "description": "For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\nopaque.",
              "type": "number"
            },
            "priority": {
              "description": "Priority of text, defaults to `0`. Elements with highest priority get placed first.",
              "type": "number"
            },
            "renderOrder": {
              "description": "The render order of the objects created using this technique.\n\nIf not specified in style file, [[StyleSetEvaluator]] will assign monotonicaly increasing\nvalues according to style position in file.",
              "type": "number"
            },
            "renderOrderBiasGroup": {
              "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
              "type": "string"
            },
            "renderOrderBiasProperty": {
              "description": "Property that is used to hold the z-order delta in [renderOrderBiasRange].",
              "type": "string"
            },
            "renderOrderBiasRange": {
              "description": "Minimum and maximum z-order delta values.",
              "items": [
                {
                  "type": "number"
                },
                {
                  "type": "number"
                }
              ],
              "maxItems": 2,
              "minItems": 2,
              "type": "array"
            },
            "reserveSpace": {
              "description": "If `true`, element will reserve screen space, other markers of lower priority will not be\nable to overlap.",
              "type": "boolean"
            },
            "size": {
              "$ref": "#/definitions/MaybeInterpolatedProperty<number>",
              "description": "Size of the text (pixels)."
            },
            "smallCaps": {
              "description": "Small caps style modifier.",
              "type": "boolean"
            },
            "style": {
              "description": "Name of the text style.",
              "type": "string"
            },
            "textFadeTime": {
              "description": "Fading time for labels in seconds.",
              "type": "number"
            },
            "textLabel": {
              "description": "The name of the property containing the text.",
              "type": "string"
            },
            "tracking": {
              "description": "Horizontal separation between glyphs.",
              "type": "number"
            },
            "transient": {
              "description": "Optional. If `true`, no IDs will be saved for the geometry this technique creates.",
              "type": "boolean"
            },
            "useAbbreviation": {
              "description": "If `true`, the abbreviation (field `name:short`) of the elements is used as text.",
              "type": "boolean"
            },
            "useIsoCode": {
              "description": "If `true`, the iso code (field 'iso_code') of the elements is used as text.\nThe `iso_code` field contains the ISO 3166-1 2-letter country code.",
              "type": "boolean"
            },
            "vAlignment": {
              "description": "Vertical alignment on a text line. Either `Above`, `Center` or `Below`.",
              "enum": [
                "Above",
                "Center",
                "Below"
              ],
              "type": "string"
            },
            "xOffset": {
              "description": "Horizontal offset (to the right) in screen pixels.",
              "type": "number"
            },
            "yOffset": {
              "description": "Vertical offset (up) in screen pixels.",
              "type": "number"
            }
          },
          "type": "object"
        },
        "debug": {
          "description": "Optional: If `true`, the objects with matching `when` statement will be printed to the\nconsole.",
          "type": "boolean"
        },
        "description": {
          "description": "Human readable description.",
          "type": "string"
        },
        "final": {
          "description": "Optional. If `true`, no more matching styles will be evaluated.",
          "type": "boolean"
        },
        "labelProperty": {
          "description": "XYZ defines the property to display as text label of a feature in the styles.",
          "type": "string"
        },
        "metricUnit": {
          "description": "Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.",
          "enum": [
            "Meter",
            "Pixel"
          ],
          "type": "string"
        },
        "renderOrder": {
          "description": "Specify `renderOrder` of object.",
          "type": "number"
        },
        "renderOrderBiasGroup": {
          "description": "Z-order group. For example: used to set same render order for all roads\nto be able to use the z-order delta when drawing tunnels or bridges over or under the roads.",
          "type": "string"
        },
        "renderOrderBiasProperty": {
          "description": "Property that is used to hold the z-order delta.",
          "type": "string"
        },
        "renderOrderBiasRange": {
          "description": "Minimum and maximum z-order delta values.",
          "items": [
            {
              "type": "number"
            },
            {
              "type": "number"
            }
          ],
          "maxItems": 2,
          "minItems": 2,
          "type": "array"
        },
        "styles": {
          "$ref": "#/definitions/StyleSet",
          "description": "Array of substyles."
        },
        "technique": {
          "description": "Technique name. Must be one of `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"dashed-line\"`,\n`\"extruded-line\"`, `\"extruded-polygon\"`, `\"text\"`, or `\"none\"`.",
          "enum": [
            "text"
          ],
          "type": "string"
        },
        "transient": {
          "description": "Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n`false`.",
          "type": "boolean"
        },
        "when": {
          "description": "Compile-time condition.",
          "type": "string"
        }
      },
      "required": [
        "technique",
        "when"
      ],
      "type": "object"
    },
    "TextStyleDefinition": {
      "additionalProperties": false,
      "description": "Various text styles used with labels and texts.",
      "properties": {
        "allCaps": {
          "type": "boolean"
        },
        "backgroundAlpha": {
          "type": "number"
        },
        "backgroundColor": {
          "type": "string"
        },
        "backgroundSize": {
          "type": "number"
        },
        "bold": {
          "type": "boolean"
        },
        "color": {
          "type": "string"
        },
        "fontCatalogName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "oblique": {
          "type": "boolean"
        },
        "smallCaps": {
          "type": "boolean"
        },
        "tracking": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "TextureBuffer": {
      "additionalProperties": false,
      "description": "Buffer holding a texture.",
      "properties": {
        "buffer": {
          "additionalProperties": false,
          "description": "Buffer containing the (compressed) image or the raw texture data.",
          "properties": {
            "byteLength": {
              "description": "Read-only. The length of the ArrayBuffer (in bytes).",
              "type": "number"
            }
          },
          "required": [
            "byteLength"
          ],
          "type": "object"
        },
        "dataTextureProperties": {
          "$ref": "#/definitions/DataTextureProperties",
          "description": "Properties for creating a three.js DataTexture\n(https://threejs.org/docs/#api/en/textures/DataTexture)."
        },
        "type": {
          "description": "Mime type of the image or 'image/raw' in case of raw texture data.",
          "type": "string"
        }
      },
      "required": [
        "buffer",
        "type"
      ],
      "type": "object"
    },
    "TextureDataType": {
      "enum": [
        "UnsignedByte",
        "Byte",
        "Short",
        "UnsignedShort",
        "Int",
        "UnsignedInt",
        "Float",
        "HalfFloat"
      ],
      "type": "string"
    },
    "TextureProperties": {
      "additionalProperties": false,
      "description": "Properties of a Texture (https://threejs.org/docs/#api/en/textures/Texture).",
      "properties": {
        "flipY": {
          "description": "Flip texture vertically.\nSee: https://threejs.org/docs/#api/en/textures/Texture.flipY.",
          "type": "boolean"
        },
        "magFilter": {
          "$ref": "#/definitions/MagFilter",
          "description": "Texture magnification filter."
        },
        "minFilter": {
          "$ref": "#/definitions/MinFilter",
          "description": "Texture minification filter."
        },
        "repeatU": {
          "description": "Texture horizontal repetition rate.\nSee: https://threejs.org/docs/#api/en/textures/Texture.repeat.",
          "type": "number"
        },
        "repeatV": {
          "description": "Texture vertical repetition rate.\nSee: https://threejs.org/docs/#api/en/textures/Texture.repeat.",
          "type": "number"
        },
        "wrapS": {
          "$ref": "#/definitions/WrappingMode",
          "description": "Texture horizontal wrapping mode.\nSee: https://threejs.org/docs/#api/en/textures/Texture.wrapS."
        },
        "wrapT": {
          "$ref": "#/definitions/WrappingMode",
          "description": "Texture vertical wrapping mode.\nSee: https://threejs.org/docs/#api/en/textures/Texture.wrapT."
        }
      },
      "type": "object"
    },
    "Theme": {
      "additionalProperties": false,
      "description": "Map theme is used to define what features are shown and how the map is styled, for example\nwhich lightning is used or whether fog should be displayed.",
      "properties": {
        "$schema": {
          "description": "The URI of the JSON schema describing themes.",
          "type": "string"
        },
        "clearColor": {
          "description": "Color to be used as a clear background - no map objects.",
          "type": "string"
        },
        "defaultTextStyle": {
          "$ref": "#/definitions/TextStyleDefinition",
          "description": "Define the default text style for styling labels and texts."
        },
        "fog": {
          "$ref": "#/definitions/Fog",
          "description": "Define the fog used in the map scene."
        },
        "fontCatalogs": {
          "description": "List available fonts to be used while rendering text.",
          "items": {
            "$ref": "#/definitions/FontCatalogConfig"
          },
          "type": "array"
        },
        "imageTextures": {
          "description": "Image textures to be used while rendering geometries on the map view.",
          "items": {
            "$ref": "#/definitions/ImageTexture"
          },
          "type": "array"
        },
        "images": {
          "$ref": "#/definitions/ImageDefinitions",
          "description": "Optional images to be rendered on the map view."
        },
        "lights": {
          "description": "Define the lightning available on the three.js scene.",
          "items": {
            "$ref": "#/definitions/Light"
          },
          "type": "array"
        },
        "poiTables": {
          "description": "Optional list of [[ThemePoiTableDef]]s.",
          "items": {
            "$ref": "#/definitions/PoiTableRef"
          },
          "type": "array"
        },
        "sky": {
          "$ref": "#/definitions/Sky",
          "description": "Define the style of the sky presented in the map scene."
        },
        "styles": {
          "$ref": "#/definitions/Styles",
          "description": "Map styles available for datasources used to render the map."
        },
        "textStyles": {
          "description": "Define the style to render different types of text used on the map.",
          "items": {
            "$ref": "#/definitions/TextStyleDefinition"
          },
          "type": "array"
        },
        "url": {
          "description": "Actual URL the theme has been loaded from.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Vector3Like": {
      "additionalProperties": false,
      "description": "Interface describing a `Vector3` class.",
      "properties": {
        "x": {
          "type": "number"
        },
        "y": {
          "type": "number"
        },
        "z": {
          "type": "number"
        }
      },
      "required": [
        "x",
        "y",
        "z"
      ],
      "type": "object"
    },
    "WrappingMode": {
      "description": "Available texture wrapping modes.",
      "enum": [
        "clamp",
        "repeat",
        "mirror"
      ],
      "type": "string"
    }
  }
}